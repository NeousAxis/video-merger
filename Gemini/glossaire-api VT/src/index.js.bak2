export class UsageCounter {
  constructor(state, env) {
    this.state = state;
    this.env = env;
  }

  async fetch(request) {
    return new Response("OK");
  }
}

export async function authenticate(request, env) {
  const token = request.headers.get("Authorization")?.replace("Bearer ", "");
  if (!token || !env.TOKENS_KV) {
    return { status: 401, message: "Missing or invalid token" };
  }
  const data = await env.TOKENS_KV.get(token, { type: "json" });
  if (!data) {
    return { status: 403, message: "Invalid token" };
  }
  return { status: 200, plan: data.plan };
}

export default {
  async fetch(request, env) {
    try {
      const auth = await authenticate(request, env);
      if (auth.status !== 200) {
        return new Response(auth.message, { status: auth.status });
      }

      const url = new URL(request.url);
      const key = url.pathname.split("/").pop();
      const value = await env.GLOSSAIRE_KV.get(key);

      if (!value) {
        return new Response("Not found", { status: 404 });
      }

      return new Response(value, {
        headers: { "Content-Type": "application/json" }
      });
    } catch (err) {
      return new Response("Unhandled exception: " + err.message, { status: 500 });
    }
  }
};